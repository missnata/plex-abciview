import re
from config import *


CONFIG_CACHE = 86400000
IVIEW_NS = {'a': 'http://www.abc.net.au/iView/Services/iViewHandshaker'}
CONFIG_URL = 'http://www.abc.net.au/iview/xml/config.xml'
SWF_URL = 'http://www.abc.net.au/iview/images/iview.jpg'

PLAYER_URL = '%s?auth=%s'
CLIP_URL = 'mp4:flash/%s%s'

def NormalizeURL(url):
	return url.replace('\\', '')


def MetadataObjectForURL(url):
	json = JSON.ObjectFromURL(url)

	return EpisodeObject(
		duration = int(json.get('duration')) * 1000,
		originally_available_at = Datetime.ParseDate(json.get('pubDate')),
		show = json.get('seriesTitle'),
		summary = json.get('description'),
		thumb = json.get('thumbnail'),
		title = json.get('title')
	)


def MediaObjectsForURL(url):
	return [
		MediaObject(
			parts = [PartObject(key = Callback(PlayVideo, url=url))]
		)
	]


@indirect
def PlayVideo(url):
	# get config values
	config_xml = XML.ElementFromURL(CONFIG_URL, cacheTime=CONFIG_CACHE)
	auth_url = config_xml.xpath('/config/param[@name="auth"]/@value')[0]
	auth_xml = XML.ElementFromURL(auth_url)

	# build rtmp player url
	player_base = config_xml.xpath('/config/param[@name="server_streaming"]/@value')[0]
	player_token = auth_xml.xpath('//a:token/text()', namespaces=IVIEW_NS)[0]

	# build rtmp clip url
	clip_base = auth_xml.xpath('//a:path/text()', namespaces=IVIEW_NS)[0]
	clip_path = GetClipPath(url)

	rtmp_video = RTMPVideoURL(
		url = PLAYER_URL % (player_base, player_token),
		clip = CLIP_URL % (clip_base, clip_path),
		swf_url = SWF_URL)

	return IndirectResponse(EpisodeObject, key=rtmp_video)


def GetClipPath(url):
	html = HTML.ElementFromURL(url.replace('api/',''))
	html_el = html.xpath('//div[@class="video-wrapper-position"]/script/text()')[0]

	return re.search(r'"mediaPath":"(.+)\.mp4"', html_el).group(1).replace('\\', '')
